<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: recursion | Jason A. French]]></title>
  <link href="http://frenchja.github.com/blog/categories/recursion/atom.xml" rel="self"/>
  <link href="http://frenchja.github.com/"/>
  <updated>2014-08-06T18:16:23-07:00</updated>
  <id>http://frenchja.github.com/</id>
  <author>
    <name><![CDATA[Jason A. French]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recursion in R]]></title>
    <link href="http://frenchja.github.com/blog/2014/07/26/recursion-in-r/"/>
    <updated>2014-07-26T15:49:00-07:00</updated>
    <id>http://frenchja.github.com/blog/2014/07/26/recursion-in-r</id>
    <content type="html"><![CDATA[<p>Most technical interviews with companies will ask
you to whiteboard code some type of recursive function
in your favorite programming language.  Although Python
seems to be the dominate king in data science, recursion
can be a powerful tool in R.</p>

<h2>What is recursion?</h2>

<p>Recursive functions call <em>themselves</em>.  That is, they
break down the problem into the smallest possible
components and the <code>function()</code> calls itself within the
original function() on each of the smaller components.
Afterward, the results are put together to solve the
original problem.  Let's take a look at more concrete examples.</p>

<!-- more -->


<h2>Quicksort</h2>

<p>A technical interview will usually ask you to implement
some type of sorting function that can be solved using
a recursive algorithm.  Let's try implementing <a href="https://en.wikipedia.org/wiki/Quicksort">quicksort</a> in R:</p>

<p>```r Programming Quicksort in R</p>

<h1>!/usr/bin/env Rscript</h1>

<h1>Author:  Jason A. French</h1>

<p>quickSort &lt;- function(vect) {</p>

<pre><code># Args:
#   vect: Numeric Vector

# Stop if vector has length of 1
if (length(vect) &lt;= 1) {
    return(vect)
}
# Pick an element from the vector
element &lt;- vect[1]
partition &lt;- vect[-1]
# Reorder vector so that integers less than element
# come before, and all integers greater come after.
v1 &lt;- partition[partition &lt; element]
v2 &lt;- partition[partition &gt;= element]
# Recursively apply steps to smaller vectors.
v1 &lt;- quickSort(v1)
v2 &lt;- quickSort(v2)
return(c(v1, element, v2))
</code></pre>

<p>}
```</p>

<p><code>r
quickSort(c(4, 65, 2, -31, 0, 99, 83, 782, 1))
[1] -31   0   1   2   4  65  83  99 782
</code></p>

<h2>Merge Sort</h2>

<p>A second sorting algorithm that we can implement using recursion is the <a href="https://en.wikipedia.org/wiki/Merge_sort">Merge Sort</a>.
Sorting algorithms are important because they differ in their <em>speed</em>, depending on the
nature of the input data.  In the case of merge sort, the <em>worst possible outcome</em> for
the time it takes to sort the data is <em>n * log(n)</em>, where <em>n</em> is the length of your list of
numbers.</p>

<p>Like Quicksort, we're splitting the vector into smaller sub-vectors by halving it until
each vector has just one integer.  We then merge the vectors back together, this time in order. Let's tackle this algorithm in R as well.</p>

<p>I found that <a href="http://rosettacode.org/">Rosetta Code</a> already provides a good example, so below is the their public domain code with my
comments added to the code for explanation.</p>

<p>```r Merge sort in R</p>

<h1>!/usr/bin/env Rscript</h1>

<h1>http://rosettacode.org/wiki/Sorting_algorithms/Merge_sort#R</h1>

<p>mergesort &lt;- function(m)</p>

<p>{
   merge_ &lt;- function(left, right)
   # Recursive function to compare and append values in order
   {</p>

<pre><code>  # Create a list to hold the results
  result &lt;- c()
  # This is our stop condition. While left and right contain 
  # a value, compare them
  while(length(left) &gt; 0 &amp;&amp; length(right) &gt; 0)
  {
     # If left is less than or equal to right,
     # add it to the result list
     if(left[1] &lt;= right[1])
     {
        result &lt;- c(result, left[1])
        # Remove the value from the list
        left &lt;- left[-1]
     } else
     {
        # When right is less than or equal to left,
        # add it to the result.
        result &lt;- c(result, right[1])
        # Remove the appended integer from the list.
        right &lt;- right[-1]
     }         
  }
  # Keep appending the values to the result while left and right
  # exist.
  if(length(left) &gt; 0) result &lt;- c(result, left)
  if(length(right) &gt; 0) result &lt;- c(result, right)
  result
</code></pre>

<p>   }</p>

<p>   # Below is our stop condition for the mergesort function.
   # When the length of the vector is 1, just return the integer.
   len &lt;- length(m)
   if(len &lt;= 1) m else
   {</p>

<pre><code>  # Otherwise keep dividing the vector into two halves.
  middle &lt;- length(m) / 2
  # Add every integer from 1 to the middle to the left
  left &lt;- m[1:floor(middle)]
  right &lt;- m[floor(middle+1):len]
  # Recursively call mergesort() on the left and right halves.
  left &lt;- mergesort(left)
  right &lt;- mergesort(right)
  # Order and combine the results.
  if(left[length(left)] &lt;= right[1])
  {
     c(left, right)
  } else
  {
     merge_(left, right)
  } 
</code></pre>

<p>   }
}
```</p>

<!--
## Binary Search Tree
Another question commonly asked in tech interviews is to 
implement a [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree).  Once again, these types of questions are common with Java or Python but R programmers can implement them 
just as well. A binary search tree is a node-based way to organize data.  The data structure generally follows some law, such as "each value in the left child is less than the parent node, and each value in the right child is greater than the parent node."

<img src="images/binarytree.png" title="Example Binary Tree" >

In the picture above, 7 is in the *root* of the tree.  All other 
values follow my rule above.

While implementing a BST is non-trivial in Python, it becomes 
more complex in R as R doesn't have pointer [variables](https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29) as far as I know.  However, we can still implement our data structure as a series of matrices, where 
each row contains the c(left, right, root) for each node.

```r
print.tree <- function(index, tree) {
    # Args:
    #   index: Tree row
    #   tree
    left <- tree$matrix[index, 1]
    print(tree$matrix[index, 3]
}

new.tree <- function(value, nrow) {
    m <- matrix(rep(NA, nrow*3, ncol = 3)
    # Place the first value in the 3rd root column
    m[1, 3] <- value
    return(list(mat = m, next = 2, nrow = nrow))
}

insert.tree <- function(index, tree, new.value) {
    # Inserts a new value into the sub-tree, with the root being
    # at 'index'.

    # Should the value go to the left or right child?
    direction <- if(new.value <= tree$matrix[index, 3]){
            1} else {
            2}
    # If that child is NA, place new.value.  Otherwise recurse down.
    if(is.na(tree$matrix[index, direction])) {
        new.index <- tree$next
        
        if(tree$next == nrow(tree$matrix) + 1) {


}


```
-->


<h3>References</h3>

<ul>
<li>Matloff, N., &amp; Matloff, N. S. (2011). The art of R programming: a tour of statistical software design. No Starch Press.</li>
<li>https://stackoverflow.com/questions/8797089/how-to-walk-up-a-tree-in-r</li>
</ul>

]]></content>
  </entry>
  
</feed>
